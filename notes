# Block all packets at input (might actually want this at forward or something), except for those going to the tunnel port, and those coming out of the tunnel interface. Mark packets coming into the tunnel interface.

# add table
nft add table althea

# add chain with default policy to drop all packets
nft add chain althea input "{ type filter hook input priority 0; policy drop; }"

# change to accept
nft chain althea input "{ policy accept; }"

# back to dropping
nft chain althea input "{ policy drop; }"

# accept udp packets on port 1234
nft add rule althea input udp dport 1234 accept

# accept anything coming out of tap0
nft add rule althea input meta iifname tap0 accept

# get handle
nft --handle list chain althea input

# try deleting rule (with handle from above)
nft delete rule althea input handle 3

# Block all packets at forward except for those going out the tunnel interface or coming from the tunnel port. Mark packets going out the tunnel interface.

table ip althea {
	chain fwd {
		type filter hook forward priority 0; policy drop;
		jump input-tunnels
	}

	chain output-tunnels {
		oifname "peer1" accept
		oifname "peer3" accept
	}

	chain input-tunnels {
		iifname "peer1" jump output-tunnels
		iifname "peer3" jump output-tunnels
	}
}

# show filters
tc filter show dev peer4

# show classes
tc -s class show dev peer4

# add drr class
tc class add dev peer4 parent 1: classid 1:2 drr quantum 800

# delete class
tc class del dev peer4 classid 1:2 root

# tc filter that selects a fw mark
tc filter add dev peer4 parent 1: protocol ip prio 1 handle 24 fw classid 1:1

# tc filter that selects everything with lower (?) priority
tc filter add dev peer4 parent 1: protocol all prio 2 u32 match u32 0 0 classid 1:3